{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.js';\nclass MIDIAccess {\n  constructor() {\n    this.onMIDIMessage = event => {\n      let message = `MIDI message received at timestamp ${event.timeStamp}[${event.data.length} bytes]: `;\n      for (const character of event.data) {\n        message += `0x${character.toString(16)}`;\n      }\n      console.log(message);\n    };\n    navigator.requestMIDIAccess().then(this.onMIDISuccess.bind(this), this.onMIDIFailure.bind(this));\n    this.midi = null;\n    this.currentNotes = [];\n  }\n  onMIDISuccess(midiAccess) {\n    console.log(\"WebMIDI is supported in browser.\");\n    console.log(midiAccess);\n    midiAccess.addEventListener('statechange', this.updateDevices);\n    this.midi = midiAccess;\n    const midiIns = midiAccess.inputs;\n    const midiOuts = midiAccess.outputs;\n    const inputs = midiIns.values();\n    const outputs = midiOuts.values();\n    let keyboard = null;\n\n    // list midi inputs to console\n    if (inputs != null) {\n      for (let input of inputs) {\n        console.log(`Found MIDI input: ${input.name}, ID: ${input.id}`);\n        if (input.name === \"V49\") {\n          keyboard = input;\n        }\n        //input.onMIDIMessage = this.onMIDIMessage.bind(this);\n      }\n    } else {\n      console.log(\"No MIDI inputs detected.\");\n    }\n\n    // list midi outputs to console\n    if (outputs != null) {\n      for (let output of outputs) {\n        console.log(`Found MIDI output: ${output.name}, ID: ${output.id}`);\n      }\n    }\n    if (keyboard != null) {\n      this.useKeyboard(keyboard);\n    }\n  }\n  updateDevices(e) {\n    console.log(`Name: ${e.port.name}, Brand: ${e.port.manufacturer}, State: ${e.port.state}, Type: ${e.port.type}`);\n  }\n  onMIDIFailure() {\n    console.log(\"Midi failure.\");\n  }\n  noteOn(note, velocity) {\n    console.log(note, velocity);\n  }\n  noteOff(note) {\n    console.log(note + \" off\");\n  }\n\n  // NOTES: 0-127\n  useKeyboard(keyboard) {\n    keyboard.onmidimessage = function (event) {\n      const command = event.data[0];\n      const note = event.data[1];\n      const velocity = event.data[2];\n      switch (command) {\n        case 144:\n          // note on\n          if (velocity > 0) {\n            console.log(\"Playing \" + note);\n            //this.noteOn(note, velocity);\n          } else {\n            console.log(\"Stopped playing \" + note);\n            //this.noteOff(note);\n          }\n\n          break;\n        case 128:\n          // note off\n          this.noteOff();\n          break;\n        default:\n          break;\n      }\n    };\n  }\n}\nexport default MIDIAccess;","map":{"version":3,"names":["React","ReactDOM","App","MIDIAccess","constructor","onMIDIMessage","event","message","timeStamp","data","length","character","toString","console","log","navigator","requestMIDIAccess","then","onMIDISuccess","bind","onMIDIFailure","midi","currentNotes","midiAccess","addEventListener","updateDevices","midiIns","inputs","midiOuts","outputs","values","keyboard","input","name","id","output","useKeyboard","e","port","manufacturer","state","type","noteOn","note","velocity","noteOff","onmidimessage","command"],"sources":["C:/Users/astri/OneDrive - Grand Canyon University/Capstone/Capstone/src/MIDIAccess.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App.js';\r\n\r\nclass MIDIAccess\r\n{\r\n    constructor()\r\n    {\r\n        navigator.requestMIDIAccess()\r\n            .then(this.onMIDISuccess.bind(this), this.onMIDIFailure.bind(this));\r\n        this.midi = null;\r\n        this.currentNotes = [];\r\n    }\r\n\r\n    onMIDISuccess(midiAccess)\r\n    {\r\n        console.log(\"WebMIDI is supported in browser.\");\r\n        console.log(midiAccess);\r\n        midiAccess.addEventListener('statechange', this.updateDevices);\r\n        this.midi = midiAccess;\r\n\r\n        const midiIns = midiAccess.inputs;\r\n        const midiOuts = midiAccess.outputs;\r\n\r\n        const inputs = midiIns.values();\r\n        const outputs = midiOuts.values();\r\n\r\n        let keyboard = null;\r\n\r\n        // list midi inputs to console\r\n        if (inputs != null)\r\n        {\r\n            for(let input of inputs)\r\n            {\r\n                console.log(`Found MIDI input: ${input.name}, ID: ${input.id}`);\r\n                if(input.name === \"V49\")\r\n                {\r\n                    keyboard = input;\r\n                }\r\n                //input.onMIDIMessage = this.onMIDIMessage.bind(this);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            console.log(\"No MIDI inputs detected.\");\r\n        }\r\n\r\n        // list midi outputs to console\r\n        if(outputs != null)\r\n        {\r\n            for(let output of outputs)\r\n            {\r\n                console.log(`Found MIDI output: ${output.name}, ID: ${output.id}`);\r\n            }\r\n        }\r\n\r\n        if(keyboard != null)\r\n        {\r\n            this.useKeyboard(keyboard);\r\n        }\r\n        \r\n    }\r\n\r\n    updateDevices(e)\r\n    {\r\n        console.log(`Name: ${e.port.name}, Brand: ${e.port.manufacturer}, State: ${e.port.state}, Type: ${e.port.type}`);\r\n    }\r\n\r\n    onMIDIFailure()\r\n    {\r\n        console.log(\"Midi failure.\");\r\n    }\r\n\r\n    onMIDIMessage = (event) =>\r\n    {\r\n        let message = `MIDI message received at timestamp ${event.timeStamp}[${event.data.length} bytes]: `;\r\n\r\n        for(const character of event.data)\r\n        {\r\n            message += `0x${character.toString(16)}`;\r\n        }\r\n\r\n        console.log(message);\r\n    }\r\n\r\n    noteOn(note, velocity)\r\n    {   \r\n        console.log(note, velocity);\r\n    }\r\n\r\n    noteOff(note)\r\n    {\r\n        console.log(note + \" off\")\r\n    }\r\n\r\n    // NOTES: 0-127\r\n    useKeyboard(keyboard)\r\n    {\r\n        keyboard.onmidimessage = function (event)\r\n        {\r\n            const command = event.data[0];\r\n            const note = event.data[1];\r\n            const velocity = event.data[2];\r\n\r\n            switch (command)\r\n            {\r\n                case 144: // note on\r\n                    if(velocity > 0)\r\n                    {\r\n                        console.log(\"Playing \" + note);\r\n                        //this.noteOn(note, velocity);\r\n                    }\r\n                    else\r\n                    {\r\n                        console.log(\"Stopped playing \" + note);\r\n                        //this.noteOff(note);\r\n                    }\r\n                    break;\r\n                case 128: // note off\r\n                    this.noteOff();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default MIDIAccess;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}